extends layout

block content
  link(href="css/landing.css" rel="stylesheet" type="text/css")
  link(href="css/canvas.css" rel="stylesheet" type="text/css")
  meta(name="description" content="Playing with shaders")
  title WebGL fun
  script(type='text/javascript', src='js/webgl-utils.js')
  script(type='text/javascript', src='js/initShaders.js')
  script(type='text/javascript', src='js/MV.js')
  script(type='text/javascript', src='js/geometry.js')
  script(type='text/javascript', src='js/two_objects.js')

  #particle
  .container
    .row
      .col-lg-12
        #jumbo.jumbotron
          .inner
            h2 WebGL
            p
              | Some experimentation with playing with WebGL shaders written myself in WebGL.
              | It has a few different shapes loaded all moving around with lighting moving around too.
              | It is pretty low resolution because I want it to work for everyone.

            p
              | This might not work on phones...

            canvas#gl-canvas(width='512', height='512' class="above" layout-align="center center")
              | Oops ... your browser doesn&apos;t support the HTML5 canvas element



  script(src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js")
  script(src="js/particleCFG.js")

  script#vertex-shader(type='x-shader/x-vertex').
      attribute  vec4 vPosition;
      attribute  vec4 vColor;
      attribute  vec3 vNormal;
      varying vec4 fColor;
      uniform mat4 modelView;
      uniform mat4 projection;
      uniform vec4 ambientProduct, diffuseProduct, specularProduct;
      uniform vec4 lightPosition;
      uniform float shininess;
      uniform vec3 theta;
      void main() {
      vec3 pos = -(modelView * vPosition).xyz;
      vec3 light = lightPosition.xyz;
      vec3 L = normalize( light - pos );
      vec3 E = normalize( -pos );
      vec3 H = normalize( L + E );
      vec4 NN = vec4(vNormal, 0);
      // Transform vertex normal into eye coordinates
      vec3 N = normalize( (modelView * NN).xyz);
      // Compute terms in the illumination equation
      vec4 ambient = ambientProduct;
      float Kd = max( dot(L, N), 0.0 );
      vec4  diffuse = Kd * diffuseProduct;
      float Ks = pow( max(dot(N, H), 0.0), shininess );
      vec4  specular = Ks * specularProduct;
      if( dot(L, N) < 0.0 ) {
      specular = vec4(0.0, 0.0, 0.0, 1.0);
      }
      gl_Position = projection * modelView * vPosition;
      fColor = ambient + diffuse + specular + vColor;
      float max = fColor.r;
      if (fColor.g > max){
      max = fColor.g;
      }
      if (fColor.b > max){
      max = fColor.b;
      }
      if (fColor.a > max){
      max = fColor.a;
      }
      fColor = fColor / max;
      fColor.a = 1.0;
      }

  script#fragment-shader(type='x-shader/x-fragment').
        precision highp float;
        varying vec4 fColor;
        void main(){
        //gl_FragColor = vec4( 0.0, 0.5, 0.0, 1.0 );
        gl_FragColor = fColor;
        }
